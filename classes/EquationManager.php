<?php
/**
 * Procède aux entrées et sorties de la table 'equations'.
 * Code skeleton generated by dia-uml2php5 plugin
 * written by KDO kdo@zpmag.com
 */

class EquationManager {

	/**
	 * 
	 * @var DB/SQL
	 * @access protected
	 */
	protected  $db;

	/**
	 * 
	 * @var Base
	 * @access protected
	 */
	protected  $f3;

	/**
	 * 
	 * @var EquationManager
	 * @access protected
	 */
	protected static $instance;


	/**
	 * Sauvegarde l'équation actuelle dans la bdd. (insert si id inexistante)
	 * @access public
	 * @param Equation $eqn 
	 * @return void
	 */

	public final function save(Equation $eqn) {
            $eqn_bdd = new DB\SQL\Mapper($this->db, 'equations');
            
            if ($eqn->getId()) {
                $eqn_bdd->load(array('id=?', $eqn->getId()));
            }

            $eqn_bdd->om_code = $eqn->getOm_code();
            $eqn_bdd->nom = $eqn->getNom();
            
            $eqn_bdd->save();
        }

        /**
	 * Supprime l'équation de la bdd.
	 * @access public
	 * @param Equation $eqn 
	 * @return void
	 */

	public final  function delete(Equation $eqn) {

	}


	/**
	 * @access public
	 * @param int $id 
	 * @return Equation
	 */

	public final  function get($id) {

	}


	/**
	 * @access public
	 * @return int
	 */

	public final  function count() {

	}


	/**
	 * Renvoie un tableau contenant toutes les équations.
	 * @access public
	 * @return Array
	 */

	public final  function getAll() {
            $eqns = $this->db->exec('SELECT * from equations');
            return $eqns;
        }

        /**
         * Renvoie une équation par reconnue par son ID
         * @access public
         * @param int id
         * @return Equation
         */

        public function getEquationFromId($id) {
                $eqn = new DB\SQL\Mapper($this->db, 'equations');
                $eqn->load(array("id=?", $id));

                return $eqn;
        }

        /**
         * Renvoie l'unique instance du manager. A appeler pour toute utilisation du Manager
         * @access public
         * @return EquationManager
         */

	public static function getInstance() {
            if(!isset(self::$instance)) {
                self::$instance = new self;
            }
            
            return self::$instance;
	}

        /**
         * Fonction de construction de la classe (attention ne peut être appelé à l'ext -> cf classe singleton)
         * @access protected
         * @return void
         */
        
        protected function __construct() {
            $this->setF3(General::getF3());
            $this->setBdd(General::getF3()->get('Bdd'));
        }


	/**
	 * @access public
	 * @param DB\SQL $db 
	 * @return void
	 */

	public final  function setBdd(DB\SQL $db) {
            $this->db = $db;
	}


	/**
	 * @access public
	 * @param Base $f3 
	 * @return void
	 */

	public final  function setF3(Base $f3) {
            $this->f3 = $f3;
	}
        
        /**
         * Remplace [Equation X] par la Xeme équation de la table
         * @access public
         * @param string $texte
         * @return string
         */

        public function placerEquations($texte) {
                return $this->getEquationFromId(9)->om_code;
        }


}
?>
